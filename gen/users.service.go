// Code generated by event-source-gen. DO NOT EDIT.
package app

import (
	"context"
	"fmt"
)

// Users
type UserCommandManager interface {
	CreateUser(ctx context.Context, a *App, cmd *CreateUser) (*UserCreated, error)
	UpdateUser(ctx context.Context, a *App, cmd *UpdateUser) (*UserUpdated, error)
}

type UserEventManager interface {
	HandleUserCreated(a *User, e UserCreated) error
	HandleUserUpdated(a *User, e UserUpdated) error
}

type UserProjectionManager interface {
	HandleUserCreatedProjection(ctx context.Context, a *App, e *UserCreated) error
	HandleUserUpdatedProjection(ctx context.Context, a *App, e *UserUpdated) error
}

// UserManager
//
// Required to implement this interface when registering the service with App.RegisterUserService
// If your interface does not have all the methods, you can create a new interface that embeds the UserCommandManager and UserEventManager interfaces.
// This will allow you to only implement the methods you need.
// If you need projections and workers, you can create a new interface that embeds the UserCommandManager, UserEventManager, and UserProjectionManager interfaces.
type UserManager interface {
	UserCommandManager
	UserEventManager
}

type UserService struct {
	app     *App
	manager UserCommandManager
}

func (a *App) RegisterUserService(service UserManager) {

	s := &UserService{
		app:     a,
		manager: service,
	}

	a.user = s

}

// CreateUser
//
// Create a new user
type CreateUser struct {
	ID        string `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

// CreateUser
//
// Create a new user
func (s *UserService) CreateUser(ctx context.Context, id string, cmd *CreateUser) error {
	event, err := s.manager.CreateUser(ctx, s.app, cmd)
	if err != nil {
		return fmt.Errorf("failed to CreateUser: %w", err)
	}

	if err := s.app.Store().Save(ctx, id, event); err != nil {
		return fmt.Errorf("failed to save event: %w", err)
	}

	s.app.Queue().Publish(ctx, event)

	return nil
}

// UpdateUser
//
// Updates the name of the user.
type UpdateUser struct {
	ID        string `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// UpdateUser
//
// Updates the name of the user.
func (s *UserService) UpdateUser(ctx context.Context, id string, cmd *UpdateUser) error {
	event, err := s.manager.UpdateUser(ctx, s.app, cmd)
	if err != nil {
		return fmt.Errorf("failed to UpdateUser: %w", err)
	}

	if err := s.app.Store().Save(ctx, id, event); err != nil {
		return fmt.Errorf("failed to save event: %w", err)
	}

	s.app.Queue().Publish(ctx, event)

	return nil
}
